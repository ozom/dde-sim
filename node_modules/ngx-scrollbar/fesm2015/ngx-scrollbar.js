import { Directive, ElementRef, NgModule, Component, Input, HostBinding, ViewChild, ChangeDetectionStrategy, Inject, NgZone, forwardRef } from '@angular/core';
import { supportsScrollBehavior } from '@angular/cdk/platform';
import { from, of, animationFrameScheduler, Subject, BehaviorSubject, Subscription, fromEvent } from 'rxjs';
import { ScrollingModule, CdkScrollable } from '@angular/cdk/scrolling';
import { BreakpointObserver, Breakpoints, LayoutModule } from '@angular/cdk/layout';
import { map, tap, throttleTime, debounceTime, mergeMap, pluck, takeUntil } from 'rxjs/operators';
import { DOCUMENT, CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SmoothScroll {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.view = el.nativeElement;
    }
    /**
     * @param {?} left
     * @param {?} top
     * @return {?}
     */
    scrollFunc(left, top) {
        if (supportsScrollBehavior()) {
            this.view.scrollTo({ top, left });
        }
        else {
            this.view.scrollTop = top;
            this.view.scrollLeft = left;
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    scrollTo(options) {
        /** @type {?} */
        const scrollFunc = (left, top) => {
            if (supportsScrollBehavior()) {
                this.view.scrollTo({ top, left });
            }
            else {
                this.view.scrollTop = top;
                this.view.scrollLeft = left;
            }
        };
        if (options.duration) {
            /** @type {?} */
            const smoothScrollOptions = {
                top: options.top,
                left: options.left,
                duration: options.duration,
                easeFunc: options.easeFunc || easeInOutQuad,
                offsetTop: this.view.scrollTop,
                offsetLeft: this.view.scrollLeft,
                scrollFunc
            };
            return from(smoothScroll(smoothScrollOptions));
        }
        this.scrollFunc(options.left, options.top);
        return of();
    }
    /**
     * @param {?} selector
     * @param {?=} offset
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToElement(selector, offset = 0, duration, easeFunc) {
        /** @type {?} */
        const target = this.view.querySelector(selector);
        return target ? this.scrollTo({ left: target.offsetLeft, top: target.offsetTop - offset, duration, easeFunc }) : of();
    }
    /**
     * @param {?} left
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollXTo(left, duration, easeFunc) {
        return this.scrollTo({ left, duration, easeFunc });
    }
    /**
     * @param {?} top
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollYTo(top, duration, easeFunc) {
        return this.scrollTo({ top, duration, easeFunc });
    }
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToTop(duration, easeFunc) {
        return this.scrollYTo(0, duration, easeFunc);
    }
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToBottom(duration, easeFunc) {
        return this.scrollYTo(this.view.scrollHeight, duration, easeFunc);
    }
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToRight(duration, easeFunc) {
        return this.scrollXTo(this.view.scrollWidth, duration, easeFunc);
    }
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToLeft(duration, easeFunc) {
        return this.scrollXTo(0, duration, easeFunc);
    }
}
SmoothScroll.decorators = [
    { type: Directive, args: [{
                selector: '[smoothScroll], [smooth-scroll]'
            },] }
];
/** @nocollapse */
SmoothScroll.ctorParameters = () => [
    { type: ElementRef }
];
/**
 * @param {?} options
 * @return {?}
 */
function smoothScroll(options) {
    return new Promise(resolve => {
        /** @type {?} */
        let currentTime = 0;
        /** @type {?} */
        const increment = 20;
        /** @type {?} */
        let valX = options.offsetLeft;
        /** @type {?} */
        let valY = options.offsetTop;
        /** @type {?} */
        const animateScroll = () => {
            // increment the time
            currentTime += increment;
            // find the value with the easing function
            if (typeof options.left !== 'undefined') {
                /** @type {?} */
                const deltaX = options.left - options.offsetLeft;
                valX = options.easeFunc(currentTime, options.offsetLeft, deltaX, options.duration);
            }
            if (typeof options.top !== 'undefined') {
                /** @type {?} */
                const deltaY = options.top - options.offsetTop;
                valY = options.easeFunc(currentTime, options.offsetTop, deltaY, options.duration);
            }
            // scroll to position
            options.scrollFunc(valX, valY);
            // do the animation unless its over
            if (currentTime < options.duration) {
                animationFrameScheduler.schedule(animateScroll);
            }
            else {
                resolve();
            }
        };
        animateScroll();
    });
}
/**
 * @param {?} t
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @return {?}
 */
function easeInOutQuad(t, b, c, d) {
    t /= d / 2;
    if (t < 1) {
        return (c / 2) * t * t + b;
    }
    t--;
    return (-c / 2) * (t * (t - 2) - 1) + b;
}
/**
 * @param {?} t
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @return {?}
 */
function easeInCubic(t, b, c, d) {
    /** @type {?} */
    const tc = (t /= d) * t * t;
    return b + c * tc;
}
/**
 * @param {?} t
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @return {?}
 */
function inOutQuintic(t, b, c, d) {
    /** @type {?} */
    const ts = (t /= d) * t;
    /** @type {?} */
    const tc = ts * t;
    return b + c * (6 * tc * ts + -15 * ts * ts + 10 * tc);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SmoothScrollModule {
}
SmoothScrollModule.decorators = [
    { type: NgModule, args: [{
                imports: [ScrollingModule],
                declarations: [SmoothScroll],
                exports: [SmoothScroll]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const defaultState = {
    viewStyle: {
        paddingRight: '0',
        paddingBottom: '0',
    },
    displayX: false,
    displayY: false
};
class NgScrollbar {
    /**
     * @param {?} breakpointObserver
     */
    constructor(breakpointObserver) {
        this.breakpointObserver = breakpointObserver;
        /**
         * Horizontal custom scrollbar
         */
        this.trackX = false;
        /**
         * Vertical custom Scrollbar
         */
        this.trackY = true;
        /**
         * Auto hide scrollbars on mouse leave
         */
        this.autoHide = false;
        /**
         * Auto update scrollbars on content changes (Mutation Observer)
         */
        this.autoUpdate = true;
        /**
         * The smooth scroll duration when a scrollbar is clicked
         */
        this.scrollToDuration = 400;
        /**
         * Disable custom scrollbars on specific breakpoints
         */
        this.disableOnBreakpoints = [
            Breakpoints.HandsetLandscape,
            Breakpoints.HandsetPortrait
        ];
        this.disabled = false;
        /**
         * Scrollbar state
         */
        this._state = new BehaviorSubject(defaultState);
        this.viewStyle = this._state.pipe(map((state) => state.viewStyle));
        this.displayX = this._state.pipe(map((state) => state.displayX));
        this.displayY = this._state.pipe(map((state) => state.displayY));
        /**
         * Mutation observer subscription
         */
        this._updateObserverSub$ = Subscription.EMPTY;
        /**
         * CDK breakpoint subscription
         */
        this._breakpointSub$ = Subscription.EMPTY;
        /**
         * Steam that emits when scrollbar thumbnail needs to update (for internal uses)
         */
        this._updateObserver = new Subject();
        this.updateObserver = this._updateObserver.asObservable();
    }
    /**
     * Disable custom scrollbars and switch back to native scrollbars
     * @param {?} disable
     * @return {?}
     */
    set disableScrollbars(disable) {
        disable ? this.disable() : this.enable();
    }
    /**
     * @return {?}
     */
    get autoHideClass() {
        return this.autoHide;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.view = this.scrollable.getElementRef().nativeElement;
        if (this.disableOnBreakpoints) {
            // Enable/Disable custom scrollbar on breakpoints (Used to disable scrollbars on mobile phones)
            this._breakpointSub$ = this.breakpointObserver.observe(this.disableOnBreakpoints).pipe(
            // filter(() => this.viewInitialized),
            tap((result) => result.matches ? this.disable() : this.enable())).subscribe();
        }
        else {
            this.enable();
        }
        // Update state on content changes
        this._updateObserverSub$ = this.updateObserver.pipe(throttleTime(200), tap(() => this.updateState())).subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._breakpointSub$.unsubscribe();
        this._updateObserverSub$.unsubscribe();
        if (this._observer) {
            this._observer.disconnect();
        }
    }
    /**
     * Update scrollbar thumbnail position
     * @return {?}
     */
    update() {
        if (!this.disabled) {
            this._updateObserver.next();
        }
    }
    /**
     * Enable custom scrollbar
     * @return {?}
     */
    enable() {
        if (this.view) {
            this.disabled = false;
            // Hide native scrollbars
            this._nativeScrollbarSize = `${this.view.offsetWidth - this.view.clientWidth + 1}px`;
            this.updateState();
            if (this.autoUpdate) {
                // Observe content changes
                this._observer = new MutationObserver(() => this.update());
                this._observer.observe(this.view, { subtree: true, childList: true, characterData: true });
            }
        }
    }
    /**
     * Disable custom scrollbar
     * @return {?}
     */
    disable() {
        this.disabled = true;
        // Show Native Scrollbars
        this.resetState();
        if (this._observer) {
            this._observer.disconnect();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    scrollTo(options) {
        return this.smoothScroll.scrollTo(options);
    }
    /**
     * @param {?} selector
     * @param {?=} offset
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToElement(selector, offset = 0, duration, easeFunc) {
        return this.smoothScroll.scrollToElement(selector, offset, duration, easeFunc);
    }
    /**
     * @param {?} to
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollXTo(to, duration, easeFunc) {
        return this.smoothScroll.scrollXTo(to, duration, easeFunc);
    }
    /**
     * @param {?} to
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollYTo(to, duration, easeFunc) {
        return this.smoothScroll.scrollYTo(to, duration, easeFunc);
    }
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToTop(duration, easeFunc) {
        return this.smoothScroll.scrollToTop(duration, easeFunc);
    }
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToBottom(duration, easeFunc) {
        return this.smoothScroll.scrollToBottom(duration, easeFunc);
    }
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToRight(duration, easeFunc) {
        return this.smoothScroll.scrollToRight(duration, easeFunc);
    }
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToLeft(duration, easeFunc) {
        return this.smoothScroll.scrollToLeft(duration, easeFunc);
    }
    /**
     * @return {?}
     */
    updateState() {
        /** @type {?} */
        let paddingBottom = '0';
        /** @type {?} */
        let paddingRight = '0';
        /** @type {?} */
        let displayY = false;
        /** @type {?} */
        let displayX = false;
        /** @type {?} */
        const size = `calc(100% + ${this._nativeScrollbarSize})`;
        if (this.trackY) {
            // Check if vertical scrollbar should be displayed
            if (this.view.scrollHeight > this.view.clientHeight) {
                displayY = true;
                paddingRight = this.overlay ? '0' : this._nativeScrollbarSize;
            }
        }
        if (this.trackX) {
            // Check if horizontal scrollbar should be displayed
            if (this.view.scrollWidth > this.view.clientWidth) {
                displayX = true;
                paddingBottom = this.overlay ? '0' : this._nativeScrollbarSize;
            }
        }
        this._state.next({
            viewStyle: {
                width: size,
                height: size,
                paddingBottom,
                paddingRight
            },
            displayX,
            displayY
        });
    }
    /**
     * @return {?}
     */
    resetState() {
        this._state.next({
            viewStyle: Object.assign({}, this._state.value.viewStyle, defaultState.viewStyle),
            displayX: defaultState.displayX,
            displayY: defaultState.displayY
        });
    }
}
NgScrollbar.decorators = [
    { type: Component, args: [{
                selector: 'ng-scrollbar',
                template: "<div class=\"ng-scrollbar-container\">\r\n\r\n  <div cdkScrollable smoothScroll class=\"ng-scrollbar-view {{viewClass}}\" [ngStyle]=\"viewStyle | async\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n\r\n  <ng-scrollbar-thumb #vertical\r\n                      *ngIf=\"!disabled && trackY\"\r\n                      orientation=\"vertical\"\r\n                      [class.ng-scrollbar-visible]=\"displayY | async\"\r\n                      [barClass]=\"barClass\"\r\n                      [thumbClass]=\"thumbClass\"\r\n                      [scrollToDuration]=\"scrollToDuration\">\r\n  </ng-scrollbar-thumb>\r\n\r\n  <ng-scrollbar-thumb #horizontal\r\n                      *ngIf=\"!disabled && trackX\"\r\n                      orientation=\"horizontal\"\r\n                      [class.ng-scrollbar-visible]=\"displayX | async\"\r\n                      [barClass]=\"barClass\"\r\n                      [thumbClass]=\"thumbClass\"\r\n                      [scrollToDuration]=\"scrollToDuration\">\r\n  </ng-scrollbar-thumb>\r\n\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block;overflow:hidden}.ng-scrollbar-container,.ng-scrollbar-view,:host{position:relative;height:100%;width:100%}.ng-scrollbar-container{overflow:hidden;top:0;left:0}.ng-scrollbar-view{overflow:scroll;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);-webkit-overflow-scrolling:touch}.ng-scrollbar-view ::-webkit-scrollbar{background:0 0}ng-scrollbar-thumb{display:none}ng-scrollbar-thumb.ng-scrollbar-visible{display:block}::ng-deep .ng-scrollbar-auto-hide .ng-scrollbar{opacity:0;transition:opacity 120ms ease-out}::ng-deep .ng-scrollbar-auto-hide:active .ng-scrollbar,::ng-deep .ng-scrollbar-auto-hide:focus .ng-scrollbar,::ng-deep .ng-scrollbar-auto-hide:hover .ng-scrollbar{opacity:1;transition:opacity 340ms ease-out}::ng-deep .ng-scrollbar{position:absolute;z-index:1;border-radius:4px}::ng-deep .ng-scrollbar-thumb{position:relative;width:0;height:0;border-radius:inherit;background-color:rgba(0,0,0,.2);-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);transition:height 150ms ease-out}::ng-deep .ng-scrollbar-thumb:active,::ng-deep .ng-scrollbar-thumb:hover{background-color:rgba(0,0,0,.3)}::ng-deep .ng-scrollbar-vertical{right:6px;top:6px;bottom:6px;width:8px}::ng-deep .ng-scrollbar-vertical .ng-scrollbar-thumb{width:100%}::ng-deep .ng-scrollbar-horizontal{left:6px;right:6px;bottom:6px;height:8px}::ng-deep .ng-scrollbar-horizontal .ng-scrollbar-thumb{height:100%}"]
            }] }
];
/** @nocollapse */
NgScrollbar.ctorParameters = () => [
    { type: BreakpointObserver }
];
NgScrollbar.propDecorators = {
    trackX: [{ type: Input }],
    trackY: [{ type: Input }],
    autoHide: [{ type: Input }],
    autoUpdate: [{ type: Input }],
    viewClass: [{ type: Input }],
    barClass: [{ type: Input }],
    thumbClass: [{ type: Input }],
    scrollToDuration: [{ type: Input }],
    overlay: [{ type: Input }],
    disableOnBreakpoints: [{ type: Input }],
    disableScrollbars: [{ type: Input, args: ['disabled',] }],
    scrollable: [{ type: ViewChild, args: [CdkScrollable,] }],
    smoothScroll: [{ type: ViewChild, args: [SmoothScroll,] }],
    verticalScrollbar: [{ type: ViewChild, args: ['vertical', { read: ElementRef },] }],
    horizontalScrollbar: [{ type: ViewChild, args: ['horizontal', { read: ElementRef },] }],
    autoHideClass: [{ type: HostBinding, args: ['class.ng-scrollbar-auto-hide',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
const ɵ0 = (val) => `translate3d(0, ${val}px, 0)`, ɵ1 = (val) => `translate3d(${val}px, 0, 0)`;
/** @type {?} */
const axis = {
    vertical: {
        topOrLeft: 'top',
        offsetYOrX: 'offsetY',
        clientYOrX: 'clientY',
        heightOrWidth: 'height',
        scrollTopLeft: 'scrollTop',
        clientHeightOrWidth: 'clientHeight',
        scrollHeightOrWidth: 'scrollHeight',
        transform: ɵ0
    },
    horizontal: {
        topOrLeft: 'left',
        offsetYOrX: 'offsetX',
        clientYOrX: 'clientX',
        heightOrWidth: 'width',
        scrollTopLeft: 'scrollLeft',
        clientHeightOrWidth: 'clientWidth',
        scrollHeightOrWidth: 'scrollWidth',
        transform: ɵ1
    }
};
class NgScrollbarThumb {
    /**
     * @param {?} zone
     * @param {?} document
     * @param {?} ngScrollbar
     */
    constructor(zone, document, ngScrollbar) {
        this.zone = zone;
        this.document = document;
        this.ngScrollbar = ngScrollbar;
        this._minThumbSize = 20;
        this._naturalThumbSize = 0;
        this._thumbSize = 0;
        this._trackMax = 0;
        this._scrollMax = 0;
        this._currPos = 0;
        this._scroll$ = Subscription.EMPTY;
        this._thumbDrag$ = Subscription.EMPTY;
        this._updateObserver$ = Subscription.EMPTY;
        this._state = new BehaviorSubject({
            transform: 'translate3d(0, 0, 0)'
        });
        /**
         * Scrollbar styles
         */
        this.scrollbarStyle = this._state.asObservable();
    }
    /**
     * Get the proper properties for scrollbar orientation
     * @return {?}
     */
    get axis() {
        return axis[this.orientation];
    }
    /**
     * Calculate scrollbar thumbnail size
     * @return {?}
     */
    get thumbSize() {
        /** @type {?} */
        const scrollBarClientHeightOrWidth = this.bar.nativeElement[this.axis.clientHeightOrWidth];
        /** @type {?} */
        const viewClientHeightOrWidth = this._view[this.axis.clientHeightOrWidth];
        /** @type {?} */
        const viewScrollHeightOrWidth = this._view[this.axis.scrollHeightOrWidth];
        this._naturalThumbSize = scrollBarClientHeightOrWidth / viewScrollHeightOrWidth * scrollBarClientHeightOrWidth;
        this._scrollMax = viewScrollHeightOrWidth - viewClientHeightOrWidth;
        return this.scrollBoundaries(this._naturalThumbSize, this._scrollMax);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._view = this.ngScrollbar.scrollable.getElementRef().nativeElement;
        // Start view scroll event
        this._scroll$ = this.ngScrollbar.scrollable.elementScrolled()
            .subscribe(() => this.updateScrollbar());
        // Start scrollbar thumbnail drag events
        this.zone.runOutsideAngular(() => this._thumbDrag$ = this.startThumbEvents().subscribe());
        // Update scrollbar thumbnail size on content changes
        this._updateObserver$ = this.ngScrollbar.updateObserver.pipe(throttleTime(200), tap(() => this.updateScrollbar()), 
        // Make sure scrollbar thumbnail position is correct after the new content is rendered
        debounceTime(200), tap(() => this.updateScrollbar())).subscribe();
        // Initialize scrollbar
        setTimeout(() => this.updateScrollbar(), 200);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._scroll$.unsubscribe();
        this._thumbDrag$.unsubscribe();
        this._updateObserver$.unsubscribe();
    }
    /**
     * Scrollbar click
     * @param {?} e Mouse event
     * @return {?}
     */
    onScrollbarClick(e) {
        if (e.target === e.currentTarget) {
            /** @type {?} */
            const offsetYOrX = e[this.axis.offsetYOrX] - this._naturalThumbSize * .5;
            /** @type {?} */
            const thumbPositionPercentage = offsetYOrX * 100 / this.bar.nativeElement[this.axis.clientHeightOrWidth];
            /** @type {?} */
            const value = thumbPositionPercentage * this._view[this.axis.scrollHeightOrWidth] / 100;
            this.ngScrollbar.scrollTo(/** @type {?} */ ({ [this.axis.topOrLeft]: value, duration: this.scrollToDuration })).subscribe();
        }
    }
    /**
     * Update scrollbar
     * @return {?}
     */
    updateScrollbar() {
        this._thumbSize = this.thumb.nativeElement[this.axis.clientHeightOrWidth];
        this._trackMax = this.bar.nativeElement[this.axis.clientHeightOrWidth] - this._thumbSize;
        this._currPos = this._view[this.axis.scrollTopLeft] * this._trackMax / this._scrollMax;
        this.zone.run(() => animationFrameScheduler.schedule(() => this.updateState({
            transform: this.axis.transform(this._currPos),
            [this.axis.heightOrWidth]: `${this.thumbSize}px`
        })));
    }
    /**
     * Start vertical thumb worker
     * @return {?}
     */
    startThumbEvents() {
        /** @type {?} */
        const mouseDown$ = fromEvent(this.thumb.nativeElement, 'mousedown');
        /** @type {?} */
        const mouseMove$ = fromEvent(this.document, 'mousemove');
        /** @type {?} */
        const mouseUp$ = fromEvent(this.document, 'mouseup').pipe(tap(() => this.document.onselectstart = null));
        return mouseDown$.pipe(tap(() => {
            this.document.onselectstart = () => false;
            // Initialize trackMax for before start dragging
            this._trackMax = this.bar.nativeElement[this.axis.clientHeightOrWidth] - this._thumbSize;
        }), pluck(this.axis.offsetYOrX), mergeMap((mouseDownOffset) => mouseMove$.pipe(takeUntil(mouseUp$), pluck(this.axis.clientYOrX), tap((mouseMoveClient) => {
            /** @type {?} */
            const offsetYOrX = mouseMoveClient - this.bar.nativeElement.getBoundingClientRect()[this.axis.topOrLeft];
            /** @type {?} */
            const value = this._scrollMax * (offsetYOrX - mouseDownOffset) / this._trackMax;
            this.ngScrollbar.scrollable.scrollTo({ [this.axis.topOrLeft]: value });
        }))));
    }
    /**
     * Get scrollbar thumb size
     * @param {?} naturalThumbSize
     * @param {?} scrollMax
     * @return {?}
     */
    scrollBoundaries(naturalThumbSize, scrollMax) {
        return (naturalThumbSize < this._minThumbSize) ? this._minThumbSize : scrollMax ? naturalThumbSize : 0;
    }
    /**
     * @param {?} state
     * @return {?}
     */
    updateState(state) {
        this._state.next(Object.assign({}, this._state.value, state));
    }
}
NgScrollbarThumb.decorators = [
    { type: Component, args: [{
                selector: 'ng-scrollbar-thumb',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div #bar class="ng-scrollbar ng-scrollbar-{{orientation}} {{barClass}}" (mousedown)="onScrollbarClick($event)">
      <div #thumb class="ng-scrollbar-thumb {{thumbClass}}" [ngStyle]="scrollbarStyle | async"></div>
    </div>
  `
            }] }
];
/** @nocollapse */
NgScrollbarThumb.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: NgScrollbar, decorators: [{ type: Inject, args: [forwardRef(() => NgScrollbar),] }] }
];
NgScrollbarThumb.propDecorators = {
    barClass: [{ type: Input }],
    thumbClass: [{ type: Input }],
    scrollToDuration: [{ type: Input }],
    orientation: [{ type: Input }],
    bar: [{ type: ViewChild, args: ['bar',] }],
    thumb: [{ type: ViewChild, args: ['thumb',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgScrollbarModule {
}
NgScrollbarModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ScrollingModule,
                    SmoothScrollModule,
                    LayoutModule
                ],
                declarations: [
                    NgScrollbar,
                    NgScrollbarThumb
                ],
                exports: [
                    NgScrollbar
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgScrollbarModule, NgScrollbar, SmoothScrollModule, smoothScroll, easeInOutQuad, easeInCubic, inOutQuintic, SmoothScroll, NgScrollbarThumb as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,