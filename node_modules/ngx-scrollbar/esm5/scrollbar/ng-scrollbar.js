/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, HostBinding, ViewChild, ElementRef, ChangeDetectionStrategy } from '@angular/core';
import { CdkScrollable } from '@angular/cdk/scrolling';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { Subject, BehaviorSubject, Subscription } from 'rxjs';
import { map, tap, throttleTime } from 'rxjs/operators';
import { SmoothScroll } from '../smooth-scroll/smooth-scroll';
/**
 * @record
 */
function NgScrollbarState() { }
/** @type {?|undefined} */
NgScrollbarState.prototype.viewStyle;
/** @type {?|undefined} */
NgScrollbarState.prototype.displayX;
/** @type {?|undefined} */
NgScrollbarState.prototype.displayY;
/** @type {?} */
var defaultState = {
    viewStyle: {
        paddingRight: '0',
        paddingBottom: '0',
    },
    displayX: false,
    displayY: false
};
var NgScrollbar = /** @class */ (function () {
    function NgScrollbar(breakpointObserver) {
        this.breakpointObserver = breakpointObserver;
        /**
         * Horizontal custom scrollbar
         */
        this.trackX = false;
        /**
         * Vertical custom Scrollbar
         */
        this.trackY = true;
        /**
         * Auto hide scrollbars on mouse leave
         */
        this.autoHide = false;
        /**
         * Auto update scrollbars on content changes (Mutation Observer)
         */
        this.autoUpdate = true;
        /**
         * The smooth scroll duration when a scrollbar is clicked
         */
        this.scrollToDuration = 400;
        /**
         * Disable custom scrollbars on specific breakpoints
         */
        this.disableOnBreakpoints = [
            Breakpoints.HandsetLandscape,
            Breakpoints.HandsetPortrait
        ];
        this.disabled = false;
        /**
         * Scrollbar state
         */
        this._state = new BehaviorSubject(defaultState);
        this.viewStyle = this._state.pipe(map(function (state) { return state.viewStyle; }));
        this.displayX = this._state.pipe(map(function (state) { return state.displayX; }));
        this.displayY = this._state.pipe(map(function (state) { return state.displayY; }));
        /**
         * Mutation observer subscription
         */
        this._updateObserverSub$ = Subscription.EMPTY;
        /**
         * CDK breakpoint subscription
         */
        this._breakpointSub$ = Subscription.EMPTY;
        /**
         * Steam that emits when scrollbar thumbnail needs to update (for internal uses)
         */
        this._updateObserver = new Subject();
        this.updateObserver = this._updateObserver.asObservable();
    }
    Object.defineProperty(NgScrollbar.prototype, "disableScrollbars", {
        /** Disable custom scrollbars and switch back to native scrollbars */
        set: /**
         * Disable custom scrollbars and switch back to native scrollbars
         * @param {?} disable
         * @return {?}
         */
        function (disable) {
            disable ? this.disable() : this.enable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgScrollbar.prototype, "autoHideClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.autoHide;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgScrollbar.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.view = this.scrollable.getElementRef().nativeElement;
        if (this.disableOnBreakpoints) {
            // Enable/Disable custom scrollbar on breakpoints (Used to disable scrollbars on mobile phones)
            this._breakpointSub$ = this.breakpointObserver.observe(this.disableOnBreakpoints).pipe(
            // filter(() => this.viewInitialized),
            tap(function (result) { return result.matches ? _this.disable() : _this.enable(); })).subscribe();
        }
        else {
            this.enable();
        }
        // Update state on content changes
        this._updateObserverSub$ = this.updateObserver.pipe(throttleTime(200), tap(function () { return _this.updateState(); })).subscribe();
    };
    /**
     * @return {?}
     */
    NgScrollbar.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._breakpointSub$.unsubscribe();
        this._updateObserverSub$.unsubscribe();
        if (this._observer) {
            this._observer.disconnect();
        }
    };
    /**
     * Update scrollbar thumbnail position
     */
    /**
     * Update scrollbar thumbnail position
     * @return {?}
     */
    NgScrollbar.prototype.update = /**
     * Update scrollbar thumbnail position
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this._updateObserver.next();
        }
    };
    /**
     * Enable custom scrollbar
     */
    /**
     * Enable custom scrollbar
     * @return {?}
     */
    NgScrollbar.prototype.enable = /**
     * Enable custom scrollbar
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.view) {
            this.disabled = false;
            // Hide native scrollbars
            this._nativeScrollbarSize = this.view.offsetWidth - this.view.clientWidth + 1 + "px";
            this.updateState();
            if (this.autoUpdate) {
                // Observe content changes
                this._observer = new MutationObserver(function () { return _this.update(); });
                this._observer.observe(this.view, { subtree: true, childList: true, characterData: true });
            }
        }
    };
    /**
     * Disable custom scrollbar
     */
    /**
     * Disable custom scrollbar
     * @return {?}
     */
    NgScrollbar.prototype.disable = /**
     * Disable custom scrollbar
     * @return {?}
     */
    function () {
        this.disabled = true;
        // Show Native Scrollbars
        this.resetState();
        if (this._observer) {
            this._observer.disconnect();
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NgScrollbar.prototype.scrollTo = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return this.smoothScroll.scrollTo(options);
    };
    /**
     * @param {?} selector
     * @param {?=} offset
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    NgScrollbar.prototype.scrollToElement = /**
     * @param {?} selector
     * @param {?=} offset
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (selector, offset, duration, easeFunc) {
        if (offset === void 0) { offset = 0; }
        return this.smoothScroll.scrollToElement(selector, offset, duration, easeFunc);
    };
    /**
     * @param {?} to
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    NgScrollbar.prototype.scrollXTo = /**
     * @param {?} to
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (to, duration, easeFunc) {
        return this.smoothScroll.scrollXTo(to, duration, easeFunc);
    };
    /**
     * @param {?} to
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    NgScrollbar.prototype.scrollYTo = /**
     * @param {?} to
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (to, duration, easeFunc) {
        return this.smoothScroll.scrollYTo(to, duration, easeFunc);
    };
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    NgScrollbar.prototype.scrollToTop = /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (duration, easeFunc) {
        return this.smoothScroll.scrollToTop(duration, easeFunc);
    };
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    NgScrollbar.prototype.scrollToBottom = /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (duration, easeFunc) {
        return this.smoothScroll.scrollToBottom(duration, easeFunc);
    };
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    NgScrollbar.prototype.scrollToRight = /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (duration, easeFunc) {
        return this.smoothScroll.scrollToRight(duration, easeFunc);
    };
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    NgScrollbar.prototype.scrollToLeft = /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (duration, easeFunc) {
        return this.smoothScroll.scrollToLeft(duration, easeFunc);
    };
    /**
     * @return {?}
     */
    NgScrollbar.prototype.updateState = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var paddingBottom = '0';
        /** @type {?} */
        var paddingRight = '0';
        /** @type {?} */
        var displayY = false;
        /** @type {?} */
        var displayX = false;
        /** @type {?} */
        var size = "calc(100% + " + this._nativeScrollbarSize + ")";
        if (this.trackY) {
            // Check if vertical scrollbar should be displayed
            if (this.view.scrollHeight > this.view.clientHeight) {
                displayY = true;
                paddingRight = this.overlay ? '0' : this._nativeScrollbarSize;
            }
        }
        if (this.trackX) {
            // Check if horizontal scrollbar should be displayed
            if (this.view.scrollWidth > this.view.clientWidth) {
                displayX = true;
                paddingBottom = this.overlay ? '0' : this._nativeScrollbarSize;
            }
        }
        this._state.next({
            viewStyle: {
                width: size,
                height: size,
                paddingBottom: paddingBottom,
                paddingRight: paddingRight
            },
            displayX: displayX,
            displayY: displayY
        });
    };
    /**
     * @return {?}
     */
    NgScrollbar.prototype.resetState = /**
     * @return {?}
     */
    function () {
        this._state.next({
            viewStyle: tslib_1.__assign({}, this._state.value.viewStyle, defaultState.viewStyle),
            displayX: defaultState.displayX,
            displayY: defaultState.displayY
        });
    };
    NgScrollbar.decorators = [
        { type: Component, args: [{
                    selector: 'ng-scrollbar',
                    template: "<div class=\"ng-scrollbar-container\">\r\n\r\n  <div cdkScrollable smoothScroll class=\"ng-scrollbar-view {{viewClass}}\" [ngStyle]=\"viewStyle | async\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n\r\n  <ng-scrollbar-thumb #vertical\r\n                      *ngIf=\"!disabled && trackY\"\r\n                      orientation=\"vertical\"\r\n                      [class.ng-scrollbar-visible]=\"displayY | async\"\r\n                      [barClass]=\"barClass\"\r\n                      [thumbClass]=\"thumbClass\"\r\n                      [scrollToDuration]=\"scrollToDuration\">\r\n  </ng-scrollbar-thumb>\r\n\r\n  <ng-scrollbar-thumb #horizontal\r\n                      *ngIf=\"!disabled && trackX\"\r\n                      orientation=\"horizontal\"\r\n                      [class.ng-scrollbar-visible]=\"displayX | async\"\r\n                      [barClass]=\"barClass\"\r\n                      [thumbClass]=\"thumbClass\"\r\n                      [scrollToDuration]=\"scrollToDuration\">\r\n  </ng-scrollbar-thumb>\r\n\r\n</div>\r\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block;overflow:hidden}.ng-scrollbar-container,.ng-scrollbar-view,:host{position:relative;height:100%;width:100%}.ng-scrollbar-container{overflow:hidden;top:0;left:0}.ng-scrollbar-view{overflow:scroll;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);-webkit-overflow-scrolling:touch}.ng-scrollbar-view ::-webkit-scrollbar{background:0 0}ng-scrollbar-thumb{display:none}ng-scrollbar-thumb.ng-scrollbar-visible{display:block}::ng-deep .ng-scrollbar-auto-hide .ng-scrollbar{opacity:0;transition:opacity 120ms ease-out}::ng-deep .ng-scrollbar-auto-hide:active .ng-scrollbar,::ng-deep .ng-scrollbar-auto-hide:focus .ng-scrollbar,::ng-deep .ng-scrollbar-auto-hide:hover .ng-scrollbar{opacity:1;transition:opacity 340ms ease-out}::ng-deep .ng-scrollbar{position:absolute;z-index:1;border-radius:4px}::ng-deep .ng-scrollbar-thumb{position:relative;width:0;height:0;border-radius:inherit;background-color:rgba(0,0,0,.2);-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);transition:height 150ms ease-out}::ng-deep .ng-scrollbar-thumb:active,::ng-deep .ng-scrollbar-thumb:hover{background-color:rgba(0,0,0,.3)}::ng-deep .ng-scrollbar-vertical{right:6px;top:6px;bottom:6px;width:8px}::ng-deep .ng-scrollbar-vertical .ng-scrollbar-thumb{width:100%}::ng-deep .ng-scrollbar-horizontal{left:6px;right:6px;bottom:6px;height:8px}::ng-deep .ng-scrollbar-horizontal .ng-scrollbar-thumb{height:100%}"]
                }] }
    ];
    /** @nocollapse */
    NgScrollbar.ctorParameters = function () { return [
        { type: BreakpointObserver }
    ]; };
    NgScrollbar.propDecorators = {
        trackX: [{ type: Input }],
        trackY: [{ type: Input }],
        autoHide: [{ type: Input }],
        autoUpdate: [{ type: Input }],
        viewClass: [{ type: Input }],
        barClass: [{ type: Input }],
        thumbClass: [{ type: Input }],
        scrollToDuration: [{ type: Input }],
        overlay: [{ type: Input }],
        disableOnBreakpoints: [{ type: Input }],
        disableScrollbars: [{ type: Input, args: ['disabled',] }],
        scrollable: [{ type: ViewChild, args: [CdkScrollable,] }],
        smoothScroll: [{ type: ViewChild, args: [SmoothScroll,] }],
        verticalScrollbar: [{ type: ViewChild, args: ['vertical', { read: ElementRef },] }],
        horizontalScrollbar: [{ type: ViewChild, args: ['horizontal', { read: ElementRef },] }],
        autoHideClass: [{ type: HostBinding, args: ['class.ng-scrollbar-auto-hide',] }]
    };
    return NgScrollbar;
}());
export { NgScrollbar };
if (false) {
    /**
     * Horizontal custom scrollbar
     * @type {?}
     */
    NgScrollbar.prototype.trackX;
    /**
     * Vertical custom Scrollbar
     * @type {?}
     */
    NgScrollbar.prototype.trackY;
    /**
     * Auto hide scrollbars on mouse leave
     * @type {?}
     */
    NgScrollbar.prototype.autoHide;
    /**
     * Auto update scrollbars on content changes (Mutation Observer)
     * @type {?}
     */
    NgScrollbar.prototype.autoUpdate;
    /**
     * Viewport class
     * @type {?}
     */
    NgScrollbar.prototype.viewClass;
    /**
     * Scrollbars class
     * @type {?}
     */
    NgScrollbar.prototype.barClass;
    /**
     * Scrollbars thumbnails class
     * @type {?}
     */
    NgScrollbar.prototype.thumbClass;
    /**
     * The smooth scroll duration when a scrollbar is clicked
     * @type {?}
     */
    NgScrollbar.prototype.scrollToDuration;
    /**
     * Use overlay scrollbars
     * @type {?}
     */
    NgScrollbar.prototype.overlay;
    /**
     * Disable custom scrollbars on specific breakpoints
     * @type {?}
     */
    NgScrollbar.prototype.disableOnBreakpoints;
    /** @type {?} */
    NgScrollbar.prototype.disabled;
    /** @type {?} */
    NgScrollbar.prototype.scrollable;
    /** @type {?} */
    NgScrollbar.prototype.smoothScroll;
    /** @type {?} */
    NgScrollbar.prototype.verticalScrollbar;
    /** @type {?} */
    NgScrollbar.prototype.horizontalScrollbar;
    /**
     * Native scrollbar size
     * @type {?}
     */
    NgScrollbar.prototype._nativeScrollbarSize;
    /**
     * Scrollbar state
     * @type {?}
     */
    NgScrollbar.prototype._state;
    /** @type {?} */
    NgScrollbar.prototype.viewStyle;
    /** @type {?} */
    NgScrollbar.prototype.displayX;
    /** @type {?} */
    NgScrollbar.prototype.displayY;
    /**
     * Mutation observer subscription
     * @type {?}
     */
    NgScrollbar.prototype._updateObserverSub$;
    /**
     * CDK breakpoint subscription
     * @type {?}
     */
    NgScrollbar.prototype._breakpointSub$;
    /**
     * Viewport Element
     * @type {?}
     */
    NgScrollbar.prototype.view;
    /**
     * Observe content changes
     * @type {?}
     */
    NgScrollbar.prototype._observer;
    /**
     * Steam that emits when scrollbar thumbnail needs to update (for internal uses)
     * @type {?}
     */
    NgScrollbar.prototype._updateObserver;
    /** @type {?} */
    NgScrollbar.prototype.updateObserver;
    /** @type {?} */
    NgScrollbar.prototype.breakpointObserver;
}

//# sourceMappingURL=data:application/json;base64,