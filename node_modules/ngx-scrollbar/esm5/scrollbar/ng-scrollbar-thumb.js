/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Inject, Input, ViewChild, NgZone, ElementRef, ChangeDetectionStrategy, forwardRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { fromEvent, BehaviorSubject, Subscription, animationFrameScheduler } from 'rxjs';
import { debounceTime, throttleTime, mergeMap, pluck, takeUntil, tap } from 'rxjs/operators';
import { NgScrollbar } from './ng-scrollbar';
/**
 * @record
 */
function AxisProperties() { }
/** @type {?} */
AxisProperties.prototype.offsetYOrX;
/** @type {?} */
AxisProperties.prototype.scrollTopLeft;
/** @type {?} */
AxisProperties.prototype.clientYOrX;
/** @type {?} */
AxisProperties.prototype.topOrLeft;
/** @type {?} */
AxisProperties.prototype.clientHeightOrWidth;
/** @type {?} */
AxisProperties.prototype.scrollHeightOrWidth;
/** @type {?} */
AxisProperties.prototype.heightOrWidth;
/** @type {?} */
AxisProperties.prototype.transform;
/**
 * @record
 */
function Axis() { }
/** @type {?} */
Axis.prototype.vertical;
/** @type {?} */
Axis.prototype.horizontal;
var ɵ0 = function (val) { return "translate3d(0, " + val + "px, 0)"; }, ɵ1 = function (val) { return "translate3d(" + val + "px, 0, 0)"; };
/** @type {?} */
var axis = {
    vertical: {
        topOrLeft: 'top',
        offsetYOrX: 'offsetY',
        clientYOrX: 'clientY',
        heightOrWidth: 'height',
        scrollTopLeft: 'scrollTop',
        clientHeightOrWidth: 'clientHeight',
        scrollHeightOrWidth: 'scrollHeight',
        transform: ɵ0
    },
    horizontal: {
        topOrLeft: 'left',
        offsetYOrX: 'offsetX',
        clientYOrX: 'clientX',
        heightOrWidth: 'width',
        scrollTopLeft: 'scrollLeft',
        clientHeightOrWidth: 'clientWidth',
        scrollHeightOrWidth: 'scrollWidth',
        transform: ɵ1
    }
};
var NgScrollbarThumb = /** @class */ (function () {
    function NgScrollbarThumb(zone, document, ngScrollbar) {
        this.zone = zone;
        this.document = document;
        this.ngScrollbar = ngScrollbar;
        this._minThumbSize = 20;
        this._naturalThumbSize = 0;
        this._thumbSize = 0;
        this._trackMax = 0;
        this._scrollMax = 0;
        this._currPos = 0;
        this._scroll$ = Subscription.EMPTY;
        this._thumbDrag$ = Subscription.EMPTY;
        this._updateObserver$ = Subscription.EMPTY;
        this._state = new BehaviorSubject({
            transform: 'translate3d(0, 0, 0)'
        });
        /**
         * Scrollbar styles
         */
        this.scrollbarStyle = this._state.asObservable();
    }
    Object.defineProperty(NgScrollbarThumb.prototype, "axis", {
        /**
         * Get the proper properties for scrollbar orientation
         */
        get: /**
         * Get the proper properties for scrollbar orientation
         * @return {?}
         */
        function () {
            return axis[this.orientation];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgScrollbarThumb.prototype, "thumbSize", {
        /**
         * Calculate scrollbar thumbnail size
         */
        get: /**
         * Calculate scrollbar thumbnail size
         * @return {?}
         */
        function () {
            /** @type {?} */
            var scrollBarClientHeightOrWidth = this.bar.nativeElement[this.axis.clientHeightOrWidth];
            /** @type {?} */
            var viewClientHeightOrWidth = this._view[this.axis.clientHeightOrWidth];
            /** @type {?} */
            var viewScrollHeightOrWidth = this._view[this.axis.scrollHeightOrWidth];
            this._naturalThumbSize = scrollBarClientHeightOrWidth / viewScrollHeightOrWidth * scrollBarClientHeightOrWidth;
            this._scrollMax = viewScrollHeightOrWidth - viewClientHeightOrWidth;
            return this.scrollBoundaries(this._naturalThumbSize, this._scrollMax);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgScrollbarThumb.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._view = this.ngScrollbar.scrollable.getElementRef().nativeElement;
        // Start view scroll event
        this._scroll$ = this.ngScrollbar.scrollable.elementScrolled()
            .subscribe(function () { return _this.updateScrollbar(); });
        // Start scrollbar thumbnail drag events
        this.zone.runOutsideAngular(function () {
            return _this._thumbDrag$ = _this.startThumbEvents().subscribe();
        });
        // Update scrollbar thumbnail size on content changes
        this._updateObserver$ = this.ngScrollbar.updateObserver.pipe(throttleTime(200), tap(function () { return _this.updateScrollbar(); }), 
        // Make sure scrollbar thumbnail position is correct after the new content is rendered
        debounceTime(200), tap(function () { return _this.updateScrollbar(); })).subscribe();
        // Initialize scrollbar
        setTimeout(function () { return _this.updateScrollbar(); }, 200);
    };
    /**
     * @return {?}
     */
    NgScrollbarThumb.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._scroll$.unsubscribe();
        this._thumbDrag$.unsubscribe();
        this._updateObserver$.unsubscribe();
    };
    /**
     * Scrollbar click
     * @param e Mouse event
     */
    /**
     * Scrollbar click
     * @param {?} e Mouse event
     * @return {?}
     */
    NgScrollbarThumb.prototype.onScrollbarClick = /**
     * Scrollbar click
     * @param {?} e Mouse event
     * @return {?}
     */
    function (e) {
        var _a;
        if (e.target === e.currentTarget) {
            /** @type {?} */
            var offsetYOrX = e[this.axis.offsetYOrX] - this._naturalThumbSize * .5;
            /** @type {?} */
            var thumbPositionPercentage = offsetYOrX * 100 / this.bar.nativeElement[this.axis.clientHeightOrWidth];
            /** @type {?} */
            var value = thumbPositionPercentage * this._view[this.axis.scrollHeightOrWidth] / 100;
            this.ngScrollbar.scrollTo(/** @type {?} */ (_a = {}, _a[this.axis.topOrLeft] = value, _a.duration = this.scrollToDuration, _a)).subscribe();
        }
    };
    /**
     * Update scrollbar
     * @return {?}
     */
    NgScrollbarThumb.prototype.updateScrollbar = /**
     * Update scrollbar
     * @return {?}
     */
    function () {
        var _this = this;
        this._thumbSize = this.thumb.nativeElement[this.axis.clientHeightOrWidth];
        this._trackMax = this.bar.nativeElement[this.axis.clientHeightOrWidth] - this._thumbSize;
        this._currPos = this._view[this.axis.scrollTopLeft] * this._trackMax / this._scrollMax;
        this.zone.run(function () {
            return animationFrameScheduler.schedule(function () {
                var _a;
                return _this.updateState((_a = {
                        transform: _this.axis.transform(_this._currPos)
                    },
                    _a[_this.axis.heightOrWidth] = _this.thumbSize + "px",
                    _a));
            });
        });
    };
    /**
     * Start vertical thumb worker
     * @return {?}
     */
    NgScrollbarThumb.prototype.startThumbEvents = /**
     * Start vertical thumb worker
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var mouseDown$ = fromEvent(this.thumb.nativeElement, 'mousedown');
        /** @type {?} */
        var mouseMove$ = fromEvent(this.document, 'mousemove');
        /** @type {?} */
        var mouseUp$ = fromEvent(this.document, 'mouseup').pipe(tap(function () { return _this.document.onselectstart = null; }));
        return mouseDown$.pipe(tap(function () {
            _this.document.onselectstart = function () { return false; };
            // Initialize trackMax for before start dragging
            _this._trackMax = _this.bar.nativeElement[_this.axis.clientHeightOrWidth] - _this._thumbSize;
        }), pluck(this.axis.offsetYOrX), mergeMap(function (mouseDownOffset) { return mouseMove$.pipe(takeUntil(mouseUp$), pluck(_this.axis.clientYOrX), tap(function (mouseMoveClient) {
            var _a;
            /** @type {?} */
            var offsetYOrX = mouseMoveClient - _this.bar.nativeElement.getBoundingClientRect()[_this.axis.topOrLeft];
            /** @type {?} */
            var value = _this._scrollMax * (offsetYOrX - mouseDownOffset) / _this._trackMax;
            _this.ngScrollbar.scrollable.scrollTo((_a = {}, _a[_this.axis.topOrLeft] = value, _a));
        })); }));
    };
    /**
     * Get scrollbar thumb size
     * @param {?} naturalThumbSize
     * @param {?} scrollMax
     * @return {?}
     */
    NgScrollbarThumb.prototype.scrollBoundaries = /**
     * Get scrollbar thumb size
     * @param {?} naturalThumbSize
     * @param {?} scrollMax
     * @return {?}
     */
    function (naturalThumbSize, scrollMax) {
        return (naturalThumbSize < this._minThumbSize) ? this._minThumbSize : scrollMax ? naturalThumbSize : 0;
    };
    /**
     * @param {?} state
     * @return {?}
     */
    NgScrollbarThumb.prototype.updateState = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this._state.next(tslib_1.__assign({}, this._state.value, state));
    };
    NgScrollbarThumb.decorators = [
        { type: Component, args: [{
                    selector: 'ng-scrollbar-thumb',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <div #bar class=\"ng-scrollbar ng-scrollbar-{{orientation}} {{barClass}}\" (mousedown)=\"onScrollbarClick($event)\">\n      <div #thumb class=\"ng-scrollbar-thumb {{thumbClass}}\" [ngStyle]=\"scrollbarStyle | async\"></div>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NgScrollbarThumb.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: NgScrollbar, decorators: [{ type: Inject, args: [forwardRef(function () { return NgScrollbar; }),] }] }
    ]; };
    NgScrollbarThumb.propDecorators = {
        barClass: [{ type: Input }],
        thumbClass: [{ type: Input }],
        scrollToDuration: [{ type: Input }],
        orientation: [{ type: Input }],
        bar: [{ type: ViewChild, args: ['bar',] }],
        thumb: [{ type: ViewChild, args: ['thumb',] }]
    };
    return NgScrollbarThumb;
}());
export { NgScrollbarThumb };
if (false) {
    /**
     * Scrollbar class
     * @type {?}
     */
    NgScrollbarThumb.prototype.barClass;
    /**
     * Scrollbar thumbnail class
     * @type {?}
     */
    NgScrollbarThumb.prototype.thumbClass;
    /**
     * The scroll duration when scrollbar (not the thumbnail) is clicked
     * @type {?}
     */
    NgScrollbarThumb.prototype.scrollToDuration;
    /**
     * Scrollbar orientation
     * @type {?}
     */
    NgScrollbarThumb.prototype.orientation;
    /** @type {?} */
    NgScrollbarThumb.prototype.bar;
    /** @type {?} */
    NgScrollbarThumb.prototype.thumb;
    /** @type {?} */
    NgScrollbarThumb.prototype._minThumbSize;
    /** @type {?} */
    NgScrollbarThumb.prototype._naturalThumbSize;
    /** @type {?} */
    NgScrollbarThumb.prototype._thumbSize;
    /** @type {?} */
    NgScrollbarThumb.prototype._trackMax;
    /** @type {?} */
    NgScrollbarThumb.prototype._scrollMax;
    /** @type {?} */
    NgScrollbarThumb.prototype._currPos;
    /** @type {?} */
    NgScrollbarThumb.prototype._scroll$;
    /** @type {?} */
    NgScrollbarThumb.prototype._thumbDrag$;
    /** @type {?} */
    NgScrollbarThumb.prototype._updateObserver$;
    /** @type {?} */
    NgScrollbarThumb.prototype._view;
    /** @type {?} */
    NgScrollbarThumb.prototype._state;
    /**
     * Scrollbar styles
     * @type {?}
     */
    NgScrollbarThumb.prototype.scrollbarStyle;
    /** @type {?} */
    NgScrollbarThumb.prototype.zone;
    /** @type {?} */
    NgScrollbarThumb.prototype.document;
    /** @type {?} */
    NgScrollbarThumb.prototype.ngScrollbar;
}
export { ɵ0, ɵ1 };

//# sourceMappingURL=data:application/json;base64,