import { AfterViewInit, OnDestroy, NgZone, ElementRef } from '@angular/core';
import { Observable } from 'rxjs';
import { NgScrollbar } from './ng-scrollbar';
interface AxisProperties {
    offsetYOrX: string;
    scrollTopLeft: string;
    clientYOrX: string;
    topOrLeft: string;
    clientHeightOrWidth: string;
    scrollHeightOrWidth: string;
    heightOrWidth: string;
    transform: (val: number) => string;
}
export declare class NgScrollbarThumb implements AfterViewInit, OnDestroy {
    private zone;
    private document;
    private ngScrollbar;
    /** Scrollbar class */
    barClass: string;
    /** Scrollbar thumbnail class */
    thumbClass: string;
    /** The scroll duration when scrollbar (not the thumbnail) is clicked */
    scrollToDuration: number;
    /** Scrollbar orientation */
    orientation: 'vertical' | 'horizontal';
    bar: ElementRef;
    thumb: ElementRef;
    private _minThumbSize;
    private _naturalThumbSize;
    private _thumbSize;
    private _trackMax;
    private _scrollMax;
    private _currPos;
    private _scroll$;
    private _thumbDrag$;
    private _updateObserver$;
    private _view;
    private _state;
    /** Scrollbar styles */
    scrollbarStyle: Observable<any>;
    /**
     * Get the proper properties for scrollbar orientation
     */
    readonly axis: AxisProperties;
    /**
     * Calculate scrollbar thumbnail size
     */
    readonly thumbSize: number;
    constructor(zone: NgZone, document: any, ngScrollbar: NgScrollbar);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Scrollbar click
     * @param e Mouse event
     */
    onScrollbarClick(e: any): void;
    /**
     * Update scrollbar
     */
    private updateScrollbar;
    /**
     * Start vertical thumb worker
     */
    private startThumbEvents;
    /**
     * Get scrollbar thumb size
     * @param naturalThumbSize
     * @param scrollMax
     */
    private scrollBoundaries;
    private updateState;
}
export {};
