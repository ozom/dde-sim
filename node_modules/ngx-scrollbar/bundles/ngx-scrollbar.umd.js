(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/platform'), require('rxjs'), require('@angular/cdk/scrolling'), require('@angular/cdk/layout'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-scrollbar', ['exports', '@angular/core', '@angular/cdk/platform', 'rxjs', '@angular/cdk/scrolling', '@angular/cdk/layout', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global['ngx-scrollbar'] = {}),global.ng.core,global.ng.cdk.platform,global.rxjs,global.ng.cdk.scrolling,global.ng.cdk.layout,global.rxjs.operators,global.ng.common));
}(this, (function (exports,core,platform,rxjs,scrolling,layout,operators,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SmoothScroll = /** @class */ (function () {
        function SmoothScroll(el) {
            this.view = el.nativeElement;
        }
        /**
         * @param {?} left
         * @param {?} top
         * @return {?}
         */
        SmoothScroll.prototype.scrollFunc = /**
         * @param {?} left
         * @param {?} top
         * @return {?}
         */
            function (left, top) {
                if (platform.supportsScrollBehavior()) {
                    this.view.scrollTo({ top: top, left: left });
                }
                else {
                    this.view.scrollTop = top;
                    this.view.scrollLeft = left;
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        SmoothScroll.prototype.scrollTo = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                /** @type {?} */
                var scrollFunc = function (left, top) {
                    if (platform.supportsScrollBehavior()) {
                        _this.view.scrollTo({ top: top, left: left });
                    }
                    else {
                        _this.view.scrollTop = top;
                        _this.view.scrollLeft = left;
                    }
                };
                if (options.duration) {
                    /** @type {?} */
                    var smoothScrollOptions = {
                        top: options.top,
                        left: options.left,
                        duration: options.duration,
                        easeFunc: options.easeFunc || easeInOutQuad,
                        offsetTop: this.view.scrollTop,
                        offsetLeft: this.view.scrollLeft,
                        scrollFunc: scrollFunc
                    };
                    return rxjs.from(smoothScroll(smoothScrollOptions));
                }
                this.scrollFunc(options.left, options.top);
                return rxjs.of();
            };
        /**
         * @param {?} selector
         * @param {?=} offset
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        SmoothScroll.prototype.scrollToElement = /**
         * @param {?} selector
         * @param {?=} offset
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (selector, offset, duration, easeFunc) {
                if (offset === void 0) {
                    offset = 0;
                }
                /** @type {?} */
                var target = this.view.querySelector(selector);
                return target ? this.scrollTo({ left: target.offsetLeft, top: target.offsetTop - offset, duration: duration, easeFunc: easeFunc }) : rxjs.of();
            };
        /**
         * @param {?} left
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        SmoothScroll.prototype.scrollXTo = /**
         * @param {?} left
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (left, duration, easeFunc) {
                return this.scrollTo({ left: left, duration: duration, easeFunc: easeFunc });
            };
        /**
         * @param {?} top
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        SmoothScroll.prototype.scrollYTo = /**
         * @param {?} top
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (top, duration, easeFunc) {
                return this.scrollTo({ top: top, duration: duration, easeFunc: easeFunc });
            };
        /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        SmoothScroll.prototype.scrollToTop = /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (duration, easeFunc) {
                return this.scrollYTo(0, duration, easeFunc);
            };
        /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        SmoothScroll.prototype.scrollToBottom = /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (duration, easeFunc) {
                return this.scrollYTo(this.view.scrollHeight, duration, easeFunc);
            };
        /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        SmoothScroll.prototype.scrollToRight = /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (duration, easeFunc) {
                return this.scrollXTo(this.view.scrollWidth, duration, easeFunc);
            };
        /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        SmoothScroll.prototype.scrollToLeft = /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (duration, easeFunc) {
                return this.scrollXTo(0, duration, easeFunc);
            };
        SmoothScroll.decorators = [
            { type: core.Directive, args: [{
                        selector: '[smoothScroll], [smooth-scroll]'
                    },] }
        ];
        /** @nocollapse */
        SmoothScroll.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        return SmoothScroll;
    }());
    /**
     * @param {?} options
     * @return {?}
     */
    function smoothScroll(options) {
        return new Promise(function (resolve) {
            /** @type {?} */
            var currentTime = 0;
            /** @type {?} */
            var increment = 20;
            /** @type {?} */
            var valX = options.offsetLeft;
            /** @type {?} */
            var valY = options.offsetTop;
            /** @type {?} */
            var animateScroll = function () {
                // increment the time
                currentTime += increment;
                // find the value with the easing function
                if (typeof options.left !== 'undefined') {
                    /** @type {?} */
                    var deltaX = options.left - options.offsetLeft;
                    valX = options.easeFunc(currentTime, options.offsetLeft, deltaX, options.duration);
                }
                if (typeof options.top !== 'undefined') {
                    /** @type {?} */
                    var deltaY = options.top - options.offsetTop;
                    valY = options.easeFunc(currentTime, options.offsetTop, deltaY, options.duration);
                }
                // scroll to position
                options.scrollFunc(valX, valY);
                // do the animation unless its over
                if (currentTime < options.duration) {
                    rxjs.animationFrameScheduler.schedule(animateScroll);
                }
                else {
                    resolve();
                }
            };
            animateScroll();
        });
    }
    /**
     * @param {?} t
     * @param {?} b
     * @param {?} c
     * @param {?} d
     * @return {?}
     */
    function easeInOutQuad(t, b, c, d) {
        t /= d / 2;
        if (t < 1) {
            return (c / 2) * t * t + b;
        }
        t--;
        return (-c / 2) * (t * (t - 2) - 1) + b;
    }
    /**
     * @param {?} t
     * @param {?} b
     * @param {?} c
     * @param {?} d
     * @return {?}
     */
    function easeInCubic(t, b, c, d) {
        /** @type {?} */
        var tc = (t /= d) * t * t;
        return b + c * tc;
    }
    /**
     * @param {?} t
     * @param {?} b
     * @param {?} c
     * @param {?} d
     * @return {?}
     */
    function inOutQuintic(t, b, c, d) {
        /** @type {?} */
        var ts = (t /= d) * t;
        /** @type {?} */
        var tc = ts * t;
        return b + c * (6 * tc * ts + -15 * ts * ts + 10 * tc);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SmoothScrollModule = /** @class */ (function () {
        function SmoothScrollModule() {
        }
        SmoothScrollModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [scrolling.ScrollingModule],
                        declarations: [SmoothScroll],
                        exports: [SmoothScroll]
                    },] }
        ];
        return SmoothScrollModule;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultState = {
        viewStyle: {
            paddingRight: '0',
            paddingBottom: '0',
        },
        displayX: false,
        displayY: false
    };
    var NgScrollbar = /** @class */ (function () {
        function NgScrollbar(breakpointObserver) {
            this.breakpointObserver = breakpointObserver;
            /**
             * Horizontal custom scrollbar
             */
            this.trackX = false;
            /**
             * Vertical custom Scrollbar
             */
            this.trackY = true;
            /**
             * Auto hide scrollbars on mouse leave
             */
            this.autoHide = false;
            /**
             * Auto update scrollbars on content changes (Mutation Observer)
             */
            this.autoUpdate = true;
            /**
             * The smooth scroll duration when a scrollbar is clicked
             */
            this.scrollToDuration = 400;
            /**
             * Disable custom scrollbars on specific breakpoints
             */
            this.disableOnBreakpoints = [
                layout.Breakpoints.HandsetLandscape,
                layout.Breakpoints.HandsetPortrait
            ];
            this.disabled = false;
            /**
             * Scrollbar state
             */
            this._state = new rxjs.BehaviorSubject(defaultState);
            this.viewStyle = this._state.pipe(operators.map(function (state) { return state.viewStyle; }));
            this.displayX = this._state.pipe(operators.map(function (state) { return state.displayX; }));
            this.displayY = this._state.pipe(operators.map(function (state) { return state.displayY; }));
            /**
             * Mutation observer subscription
             */
            this._updateObserverSub$ = rxjs.Subscription.EMPTY;
            /**
             * CDK breakpoint subscription
             */
            this._breakpointSub$ = rxjs.Subscription.EMPTY;
            /**
             * Steam that emits when scrollbar thumbnail needs to update (for internal uses)
             */
            this._updateObserver = new rxjs.Subject();
            this.updateObserver = this._updateObserver.asObservable();
        }
        Object.defineProperty(NgScrollbar.prototype, "disableScrollbars", {
            /** Disable custom scrollbars and switch back to native scrollbars */
            set: /**
             * Disable custom scrollbars and switch back to native scrollbars
             * @param {?} disable
             * @return {?}
             */ function (disable) {
                disable ? this.disable() : this.enable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgScrollbar.prototype, "autoHideClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.autoHide;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgScrollbar.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.view = this.scrollable.getElementRef().nativeElement;
                if (this.disableOnBreakpoints) {
                    // Enable/Disable custom scrollbar on breakpoints (Used to disable scrollbars on mobile phones)
                    this._breakpointSub$ = this.breakpointObserver.observe(this.disableOnBreakpoints).pipe(
                    // filter(() => this.viewInitialized),
                    operators.tap(function (result) { return result.matches ? _this.disable() : _this.enable(); })).subscribe();
                }
                else {
                    this.enable();
                }
                // Update state on content changes
                this._updateObserverSub$ = this.updateObserver.pipe(operators.throttleTime(200), operators.tap(function () { return _this.updateState(); })).subscribe();
            };
        /**
         * @return {?}
         */
        NgScrollbar.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._breakpointSub$.unsubscribe();
                this._updateObserverSub$.unsubscribe();
                if (this._observer) {
                    this._observer.disconnect();
                }
            };
        /**
         * Update scrollbar thumbnail position
         */
        /**
         * Update scrollbar thumbnail position
         * @return {?}
         */
        NgScrollbar.prototype.update = /**
         * Update scrollbar thumbnail position
         * @return {?}
         */
            function () {
                if (!this.disabled) {
                    this._updateObserver.next();
                }
            };
        /**
         * Enable custom scrollbar
         */
        /**
         * Enable custom scrollbar
         * @return {?}
         */
        NgScrollbar.prototype.enable = /**
         * Enable custom scrollbar
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.view) {
                    this.disabled = false;
                    // Hide native scrollbars
                    this._nativeScrollbarSize = this.view.offsetWidth - this.view.clientWidth + 1 + "px";
                    this.updateState();
                    if (this.autoUpdate) {
                        // Observe content changes
                        this._observer = new MutationObserver(function () { return _this.update(); });
                        this._observer.observe(this.view, { subtree: true, childList: true, characterData: true });
                    }
                }
            };
        /**
         * Disable custom scrollbar
         */
        /**
         * Disable custom scrollbar
         * @return {?}
         */
        NgScrollbar.prototype.disable = /**
         * Disable custom scrollbar
         * @return {?}
         */
            function () {
                this.disabled = true;
                // Show Native Scrollbars
                this.resetState();
                if (this._observer) {
                    this._observer.disconnect();
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        NgScrollbar.prototype.scrollTo = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                return this.smoothScroll.scrollTo(options);
            };
        /**
         * @param {?} selector
         * @param {?=} offset
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        NgScrollbar.prototype.scrollToElement = /**
         * @param {?} selector
         * @param {?=} offset
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (selector, offset, duration, easeFunc) {
                if (offset === void 0) {
                    offset = 0;
                }
                return this.smoothScroll.scrollToElement(selector, offset, duration, easeFunc);
            };
        /**
         * @param {?} to
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        NgScrollbar.prototype.scrollXTo = /**
         * @param {?} to
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (to, duration, easeFunc) {
                return this.smoothScroll.scrollXTo(to, duration, easeFunc);
            };
        /**
         * @param {?} to
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        NgScrollbar.prototype.scrollYTo = /**
         * @param {?} to
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (to, duration, easeFunc) {
                return this.smoothScroll.scrollYTo(to, duration, easeFunc);
            };
        /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        NgScrollbar.prototype.scrollToTop = /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (duration, easeFunc) {
                return this.smoothScroll.scrollToTop(duration, easeFunc);
            };
        /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        NgScrollbar.prototype.scrollToBottom = /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (duration, easeFunc) {
                return this.smoothScroll.scrollToBottom(duration, easeFunc);
            };
        /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        NgScrollbar.prototype.scrollToRight = /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (duration, easeFunc) {
                return this.smoothScroll.scrollToRight(duration, easeFunc);
            };
        /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
        NgScrollbar.prototype.scrollToLeft = /**
         * @param {?=} duration
         * @param {?=} easeFunc
         * @return {?}
         */
            function (duration, easeFunc) {
                return this.smoothScroll.scrollToLeft(duration, easeFunc);
            };
        /**
         * @return {?}
         */
        NgScrollbar.prototype.updateState = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var paddingBottom = '0';
                /** @type {?} */
                var paddingRight = '0';
                /** @type {?} */
                var displayY = false;
                /** @type {?} */
                var displayX = false;
                /** @type {?} */
                var size = "calc(100% + " + this._nativeScrollbarSize + ")";
                if (this.trackY) {
                    // Check if vertical scrollbar should be displayed
                    if (this.view.scrollHeight > this.view.clientHeight) {
                        displayY = true;
                        paddingRight = this.overlay ? '0' : this._nativeScrollbarSize;
                    }
                }
                if (this.trackX) {
                    // Check if horizontal scrollbar should be displayed
                    if (this.view.scrollWidth > this.view.clientWidth) {
                        displayX = true;
                        paddingBottom = this.overlay ? '0' : this._nativeScrollbarSize;
                    }
                }
                this._state.next({
                    viewStyle: {
                        width: size,
                        height: size,
                        paddingBottom: paddingBottom,
                        paddingRight: paddingRight
                    },
                    displayX: displayX,
                    displayY: displayY
                });
            };
        /**
         * @return {?}
         */
        NgScrollbar.prototype.resetState = /**
         * @return {?}
         */
            function () {
                this._state.next({
                    viewStyle: __assign({}, this._state.value.viewStyle, defaultState.viewStyle),
                    displayX: defaultState.displayX,
                    displayY: defaultState.displayY
                });
            };
        NgScrollbar.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-scrollbar',
                        template: "<div class=\"ng-scrollbar-container\">\r\n\r\n  <div cdkScrollable smoothScroll class=\"ng-scrollbar-view {{viewClass}}\" [ngStyle]=\"viewStyle | async\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n\r\n  <ng-scrollbar-thumb #vertical\r\n                      *ngIf=\"!disabled && trackY\"\r\n                      orientation=\"vertical\"\r\n                      [class.ng-scrollbar-visible]=\"displayY | async\"\r\n                      [barClass]=\"barClass\"\r\n                      [thumbClass]=\"thumbClass\"\r\n                      [scrollToDuration]=\"scrollToDuration\">\r\n  </ng-scrollbar-thumb>\r\n\r\n  <ng-scrollbar-thumb #horizontal\r\n                      *ngIf=\"!disabled && trackX\"\r\n                      orientation=\"horizontal\"\r\n                      [class.ng-scrollbar-visible]=\"displayX | async\"\r\n                      [barClass]=\"barClass\"\r\n                      [thumbClass]=\"thumbClass\"\r\n                      [scrollToDuration]=\"scrollToDuration\">\r\n  </ng-scrollbar-thumb>\r\n\r\n</div>\r\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [":host{display:block;overflow:hidden}.ng-scrollbar-container,.ng-scrollbar-view,:host{position:relative;height:100%;width:100%}.ng-scrollbar-container{overflow:hidden;top:0;left:0}.ng-scrollbar-view{overflow:scroll;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);-webkit-overflow-scrolling:touch}.ng-scrollbar-view ::-webkit-scrollbar{background:0 0}ng-scrollbar-thumb{display:none}ng-scrollbar-thumb.ng-scrollbar-visible{display:block}::ng-deep .ng-scrollbar-auto-hide .ng-scrollbar{opacity:0;transition:opacity 120ms ease-out}::ng-deep .ng-scrollbar-auto-hide:active .ng-scrollbar,::ng-deep .ng-scrollbar-auto-hide:focus .ng-scrollbar,::ng-deep .ng-scrollbar-auto-hide:hover .ng-scrollbar{opacity:1;transition:opacity 340ms ease-out}::ng-deep .ng-scrollbar{position:absolute;z-index:1;border-radius:4px}::ng-deep .ng-scrollbar-thumb{position:relative;width:0;height:0;border-radius:inherit;background-color:rgba(0,0,0,.2);-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);transition:height 150ms ease-out}::ng-deep .ng-scrollbar-thumb:active,::ng-deep .ng-scrollbar-thumb:hover{background-color:rgba(0,0,0,.3)}::ng-deep .ng-scrollbar-vertical{right:6px;top:6px;bottom:6px;width:8px}::ng-deep .ng-scrollbar-vertical .ng-scrollbar-thumb{width:100%}::ng-deep .ng-scrollbar-horizontal{left:6px;right:6px;bottom:6px;height:8px}::ng-deep .ng-scrollbar-horizontal .ng-scrollbar-thumb{height:100%}"]
                    }] }
        ];
        /** @nocollapse */
        NgScrollbar.ctorParameters = function () {
            return [
                { type: layout.BreakpointObserver }
            ];
        };
        NgScrollbar.propDecorators = {
            trackX: [{ type: core.Input }],
            trackY: [{ type: core.Input }],
            autoHide: [{ type: core.Input }],
            autoUpdate: [{ type: core.Input }],
            viewClass: [{ type: core.Input }],
            barClass: [{ type: core.Input }],
            thumbClass: [{ type: core.Input }],
            scrollToDuration: [{ type: core.Input }],
            overlay: [{ type: core.Input }],
            disableOnBreakpoints: [{ type: core.Input }],
            disableScrollbars: [{ type: core.Input, args: ['disabled',] }],
            scrollable: [{ type: core.ViewChild, args: [scrolling.CdkScrollable,] }],
            smoothScroll: [{ type: core.ViewChild, args: [SmoothScroll,] }],
            verticalScrollbar: [{ type: core.ViewChild, args: ['vertical', { read: core.ElementRef },] }],
            horizontalScrollbar: [{ type: core.ViewChild, args: ['horizontal', { read: core.ElementRef },] }],
            autoHideClass: [{ type: core.HostBinding, args: ['class.ng-scrollbar-auto-hide',] }]
        };
        return NgScrollbar;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ɵ0 = function (val) { return "translate3d(0, " + val + "px, 0)"; }, ɵ1 = function (val) { return "translate3d(" + val + "px, 0, 0)"; };
    /** @type {?} */
    var axis = {
        vertical: {
            topOrLeft: 'top',
            offsetYOrX: 'offsetY',
            clientYOrX: 'clientY',
            heightOrWidth: 'height',
            scrollTopLeft: 'scrollTop',
            clientHeightOrWidth: 'clientHeight',
            scrollHeightOrWidth: 'scrollHeight',
            transform: ɵ0
        },
        horizontal: {
            topOrLeft: 'left',
            offsetYOrX: 'offsetX',
            clientYOrX: 'clientX',
            heightOrWidth: 'width',
            scrollTopLeft: 'scrollLeft',
            clientHeightOrWidth: 'clientWidth',
            scrollHeightOrWidth: 'scrollWidth',
            transform: ɵ1
        }
    };
    var NgScrollbarThumb = /** @class */ (function () {
        function NgScrollbarThumb(zone, document, ngScrollbar) {
            this.zone = zone;
            this.document = document;
            this.ngScrollbar = ngScrollbar;
            this._minThumbSize = 20;
            this._naturalThumbSize = 0;
            this._thumbSize = 0;
            this._trackMax = 0;
            this._scrollMax = 0;
            this._currPos = 0;
            this._scroll$ = rxjs.Subscription.EMPTY;
            this._thumbDrag$ = rxjs.Subscription.EMPTY;
            this._updateObserver$ = rxjs.Subscription.EMPTY;
            this._state = new rxjs.BehaviorSubject({
                transform: 'translate3d(0, 0, 0)'
            });
            /**
             * Scrollbar styles
             */
            this.scrollbarStyle = this._state.asObservable();
        }
        Object.defineProperty(NgScrollbarThumb.prototype, "axis", {
            /**
             * Get the proper properties for scrollbar orientation
             */
            get: /**
             * Get the proper properties for scrollbar orientation
             * @return {?}
             */ function () {
                return axis[this.orientation];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgScrollbarThumb.prototype, "thumbSize", {
            /**
             * Calculate scrollbar thumbnail size
             */
            get: /**
             * Calculate scrollbar thumbnail size
             * @return {?}
             */ function () {
                /** @type {?} */
                var scrollBarClientHeightOrWidth = this.bar.nativeElement[this.axis.clientHeightOrWidth];
                /** @type {?} */
                var viewClientHeightOrWidth = this._view[this.axis.clientHeightOrWidth];
                /** @type {?} */
                var viewScrollHeightOrWidth = this._view[this.axis.scrollHeightOrWidth];
                this._naturalThumbSize = scrollBarClientHeightOrWidth / viewScrollHeightOrWidth * scrollBarClientHeightOrWidth;
                this._scrollMax = viewScrollHeightOrWidth - viewClientHeightOrWidth;
                return this.scrollBoundaries(this._naturalThumbSize, this._scrollMax);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgScrollbarThumb.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._view = this.ngScrollbar.scrollable.getElementRef().nativeElement;
                // Start view scroll event
                this._scroll$ = this.ngScrollbar.scrollable.elementScrolled()
                    .subscribe(function () { return _this.updateScrollbar(); });
                // Start scrollbar thumbnail drag events
                this.zone.runOutsideAngular(function () {
                    return _this._thumbDrag$ = _this.startThumbEvents().subscribe();
                });
                // Update scrollbar thumbnail size on content changes
                this._updateObserver$ = this.ngScrollbar.updateObserver.pipe(operators.throttleTime(200), operators.tap(function () { return _this.updateScrollbar(); }), 
                // Make sure scrollbar thumbnail position is correct after the new content is rendered
                operators.debounceTime(200), operators.tap(function () { return _this.updateScrollbar(); })).subscribe();
                // Initialize scrollbar
                setTimeout(function () { return _this.updateScrollbar(); }, 200);
            };
        /**
         * @return {?}
         */
        NgScrollbarThumb.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._scroll$.unsubscribe();
                this._thumbDrag$.unsubscribe();
                this._updateObserver$.unsubscribe();
            };
        /**
         * Scrollbar click
         * @param e Mouse event
         */
        /**
         * Scrollbar click
         * @param {?} e Mouse event
         * @return {?}
         */
        NgScrollbarThumb.prototype.onScrollbarClick = /**
         * Scrollbar click
         * @param {?} e Mouse event
         * @return {?}
         */
            function (e) {
                var _a;
                if (e.target === e.currentTarget) {
                    /** @type {?} */
                    var offsetYOrX = e[this.axis.offsetYOrX] - this._naturalThumbSize * .5;
                    /** @type {?} */
                    var thumbPositionPercentage = offsetYOrX * 100 / this.bar.nativeElement[this.axis.clientHeightOrWidth];
                    /** @type {?} */
                    var value = thumbPositionPercentage * this._view[this.axis.scrollHeightOrWidth] / 100;
                    this.ngScrollbar.scrollTo(/** @type {?} */ (_a = {}, _a[this.axis.topOrLeft] = value, _a.duration = this.scrollToDuration, _a)).subscribe();
                }
            };
        /**
         * Update scrollbar
         * @return {?}
         */
        NgScrollbarThumb.prototype.updateScrollbar = /**
         * Update scrollbar
         * @return {?}
         */
            function () {
                var _this = this;
                this._thumbSize = this.thumb.nativeElement[this.axis.clientHeightOrWidth];
                this._trackMax = this.bar.nativeElement[this.axis.clientHeightOrWidth] - this._thumbSize;
                this._currPos = this._view[this.axis.scrollTopLeft] * this._trackMax / this._scrollMax;
                this.zone.run(function () {
                    return rxjs.animationFrameScheduler.schedule(function () {
                        var _a;
                        return _this.updateState((_a = {
                            transform: _this.axis.transform(_this._currPos)
                        },
                            _a[_this.axis.heightOrWidth] = _this.thumbSize + "px",
                            _a));
                    });
                });
            };
        /**
         * Start vertical thumb worker
         * @return {?}
         */
        NgScrollbarThumb.prototype.startThumbEvents = /**
         * Start vertical thumb worker
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var mouseDown$ = rxjs.fromEvent(this.thumb.nativeElement, 'mousedown');
                /** @type {?} */
                var mouseMove$ = rxjs.fromEvent(this.document, 'mousemove');
                /** @type {?} */
                var mouseUp$ = rxjs.fromEvent(this.document, 'mouseup').pipe(operators.tap(function () { return _this.document.onselectstart = null; }));
                return mouseDown$.pipe(operators.tap(function () {
                    _this.document.onselectstart = function () { return false; };
                    // Initialize trackMax for before start dragging
                    _this._trackMax = _this.bar.nativeElement[_this.axis.clientHeightOrWidth] - _this._thumbSize;
                }), operators.pluck(this.axis.offsetYOrX), operators.mergeMap(function (mouseDownOffset) {
                    return mouseMove$.pipe(operators.takeUntil(mouseUp$), operators.pluck(_this.axis.clientYOrX), operators.tap(function (mouseMoveClient) {
                        var _a;
                        /** @type {?} */
                        var offsetYOrX = mouseMoveClient - _this.bar.nativeElement.getBoundingClientRect()[_this.axis.topOrLeft];
                        /** @type {?} */
                        var value = _this._scrollMax * (offsetYOrX - mouseDownOffset) / _this._trackMax;
                        _this.ngScrollbar.scrollable.scrollTo((_a = {}, _a[_this.axis.topOrLeft] = value, _a));
                    }));
                }));
            };
        /**
         * Get scrollbar thumb size
         * @param {?} naturalThumbSize
         * @param {?} scrollMax
         * @return {?}
         */
        NgScrollbarThumb.prototype.scrollBoundaries = /**
         * Get scrollbar thumb size
         * @param {?} naturalThumbSize
         * @param {?} scrollMax
         * @return {?}
         */
            function (naturalThumbSize, scrollMax) {
                return (naturalThumbSize < this._minThumbSize) ? this._minThumbSize : scrollMax ? naturalThumbSize : 0;
            };
        /**
         * @param {?} state
         * @return {?}
         */
        NgScrollbarThumb.prototype.updateState = /**
         * @param {?} state
         * @return {?}
         */
            function (state) {
                this._state.next(__assign({}, this._state.value, state));
            };
        NgScrollbarThumb.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-scrollbar-thumb',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "\n    <div #bar class=\"ng-scrollbar ng-scrollbar-{{orientation}} {{barClass}}\" (mousedown)=\"onScrollbarClick($event)\">\n      <div #thumb class=\"ng-scrollbar-thumb {{thumbClass}}\" [ngStyle]=\"scrollbarStyle | async\"></div>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgScrollbarThumb.ctorParameters = function () {
            return [
                { type: core.NgZone },
                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
                { type: NgScrollbar, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgScrollbar; }),] }] }
            ];
        };
        NgScrollbarThumb.propDecorators = {
            barClass: [{ type: core.Input }],
            thumbClass: [{ type: core.Input }],
            scrollToDuration: [{ type: core.Input }],
            orientation: [{ type: core.Input }],
            bar: [{ type: core.ViewChild, args: ['bar',] }],
            thumb: [{ type: core.ViewChild, args: ['thumb',] }]
        };
        return NgScrollbarThumb;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgScrollbarModule = /** @class */ (function () {
        function NgScrollbarModule() {
        }
        NgScrollbarModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            scrolling.ScrollingModule,
                            SmoothScrollModule,
                            layout.LayoutModule
                        ],
                        declarations: [
                            NgScrollbar,
                            NgScrollbarThumb
                        ],
                        exports: [
                            NgScrollbar
                        ]
                    },] }
        ];
        return NgScrollbarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgScrollbarModule = NgScrollbarModule;
    exports.NgScrollbar = NgScrollbar;
    exports.SmoothScrollModule = SmoothScrollModule;
    exports.smoothScroll = smoothScroll;
    exports.easeInOutQuad = easeInOutQuad;
    exports.easeInCubic = easeInCubic;
    exports.inOutQuintic = inOutQuintic;
    exports.SmoothScroll = SmoothScroll;
    exports.ɵa = NgScrollbarThumb;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,