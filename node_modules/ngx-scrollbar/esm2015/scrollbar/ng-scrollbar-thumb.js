/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Inject, Input, ViewChild, NgZone, ElementRef, ChangeDetectionStrategy, forwardRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { fromEvent, BehaviorSubject, Subscription, animationFrameScheduler } from 'rxjs';
import { debounceTime, throttleTime, mergeMap, pluck, takeUntil, tap } from 'rxjs/operators';
import { NgScrollbar } from './ng-scrollbar';
/**
 * @record
 */
function AxisProperties() { }
/** @type {?} */
AxisProperties.prototype.offsetYOrX;
/** @type {?} */
AxisProperties.prototype.scrollTopLeft;
/** @type {?} */
AxisProperties.prototype.clientYOrX;
/** @type {?} */
AxisProperties.prototype.topOrLeft;
/** @type {?} */
AxisProperties.prototype.clientHeightOrWidth;
/** @type {?} */
AxisProperties.prototype.scrollHeightOrWidth;
/** @type {?} */
AxisProperties.prototype.heightOrWidth;
/** @type {?} */
AxisProperties.prototype.transform;
/**
 * @record
 */
function Axis() { }
/** @type {?} */
Axis.prototype.vertical;
/** @type {?} */
Axis.prototype.horizontal;
const ɵ0 = (val) => `translate3d(0, ${val}px, 0)`, ɵ1 = (val) => `translate3d(${val}px, 0, 0)`;
/** @type {?} */
const axis = {
    vertical: {
        topOrLeft: 'top',
        offsetYOrX: 'offsetY',
        clientYOrX: 'clientY',
        heightOrWidth: 'height',
        scrollTopLeft: 'scrollTop',
        clientHeightOrWidth: 'clientHeight',
        scrollHeightOrWidth: 'scrollHeight',
        transform: ɵ0
    },
    horizontal: {
        topOrLeft: 'left',
        offsetYOrX: 'offsetX',
        clientYOrX: 'clientX',
        heightOrWidth: 'width',
        scrollTopLeft: 'scrollLeft',
        clientHeightOrWidth: 'clientWidth',
        scrollHeightOrWidth: 'scrollWidth',
        transform: ɵ1
    }
};
export class NgScrollbarThumb {
    /**
     * @param {?} zone
     * @param {?} document
     * @param {?} ngScrollbar
     */
    constructor(zone, document, ngScrollbar) {
        this.zone = zone;
        this.document = document;
        this.ngScrollbar = ngScrollbar;
        this._minThumbSize = 20;
        this._naturalThumbSize = 0;
        this._thumbSize = 0;
        this._trackMax = 0;
        this._scrollMax = 0;
        this._currPos = 0;
        this._scroll$ = Subscription.EMPTY;
        this._thumbDrag$ = Subscription.EMPTY;
        this._updateObserver$ = Subscription.EMPTY;
        this._state = new BehaviorSubject({
            transform: 'translate3d(0, 0, 0)'
        });
        /**
         * Scrollbar styles
         */
        this.scrollbarStyle = this._state.asObservable();
    }
    /**
     * Get the proper properties for scrollbar orientation
     * @return {?}
     */
    get axis() {
        return axis[this.orientation];
    }
    /**
     * Calculate scrollbar thumbnail size
     * @return {?}
     */
    get thumbSize() {
        /** @type {?} */
        const scrollBarClientHeightOrWidth = this.bar.nativeElement[this.axis.clientHeightOrWidth];
        /** @type {?} */
        const viewClientHeightOrWidth = this._view[this.axis.clientHeightOrWidth];
        /** @type {?} */
        const viewScrollHeightOrWidth = this._view[this.axis.scrollHeightOrWidth];
        this._naturalThumbSize = scrollBarClientHeightOrWidth / viewScrollHeightOrWidth * scrollBarClientHeightOrWidth;
        this._scrollMax = viewScrollHeightOrWidth - viewClientHeightOrWidth;
        return this.scrollBoundaries(this._naturalThumbSize, this._scrollMax);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._view = this.ngScrollbar.scrollable.getElementRef().nativeElement;
        // Start view scroll event
        this._scroll$ = this.ngScrollbar.scrollable.elementScrolled()
            .subscribe(() => this.updateScrollbar());
        // Start scrollbar thumbnail drag events
        this.zone.runOutsideAngular(() => this._thumbDrag$ = this.startThumbEvents().subscribe());
        // Update scrollbar thumbnail size on content changes
        this._updateObserver$ = this.ngScrollbar.updateObserver.pipe(throttleTime(200), tap(() => this.updateScrollbar()), 
        // Make sure scrollbar thumbnail position is correct after the new content is rendered
        debounceTime(200), tap(() => this.updateScrollbar())).subscribe();
        // Initialize scrollbar
        setTimeout(() => this.updateScrollbar(), 200);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._scroll$.unsubscribe();
        this._thumbDrag$.unsubscribe();
        this._updateObserver$.unsubscribe();
    }
    /**
     * Scrollbar click
     * @param {?} e Mouse event
     * @return {?}
     */
    onScrollbarClick(e) {
        if (e.target === e.currentTarget) {
            /** @type {?} */
            const offsetYOrX = e[this.axis.offsetYOrX] - this._naturalThumbSize * .5;
            /** @type {?} */
            const thumbPositionPercentage = offsetYOrX * 100 / this.bar.nativeElement[this.axis.clientHeightOrWidth];
            /** @type {?} */
            const value = thumbPositionPercentage * this._view[this.axis.scrollHeightOrWidth] / 100;
            this.ngScrollbar.scrollTo(/** @type {?} */ ({ [this.axis.topOrLeft]: value, duration: this.scrollToDuration })).subscribe();
        }
    }
    /**
     * Update scrollbar
     * @return {?}
     */
    updateScrollbar() {
        this._thumbSize = this.thumb.nativeElement[this.axis.clientHeightOrWidth];
        this._trackMax = this.bar.nativeElement[this.axis.clientHeightOrWidth] - this._thumbSize;
        this._currPos = this._view[this.axis.scrollTopLeft] * this._trackMax / this._scrollMax;
        this.zone.run(() => animationFrameScheduler.schedule(() => this.updateState({
            transform: this.axis.transform(this._currPos),
            [this.axis.heightOrWidth]: `${this.thumbSize}px`
        })));
    }
    /**
     * Start vertical thumb worker
     * @return {?}
     */
    startThumbEvents() {
        /** @type {?} */
        const mouseDown$ = fromEvent(this.thumb.nativeElement, 'mousedown');
        /** @type {?} */
        const mouseMove$ = fromEvent(this.document, 'mousemove');
        /** @type {?} */
        const mouseUp$ = fromEvent(this.document, 'mouseup').pipe(tap(() => this.document.onselectstart = null));
        return mouseDown$.pipe(tap(() => {
            this.document.onselectstart = () => false;
            // Initialize trackMax for before start dragging
            this._trackMax = this.bar.nativeElement[this.axis.clientHeightOrWidth] - this._thumbSize;
        }), pluck(this.axis.offsetYOrX), mergeMap((mouseDownOffset) => mouseMove$.pipe(takeUntil(mouseUp$), pluck(this.axis.clientYOrX), tap((mouseMoveClient) => {
            /** @type {?} */
            const offsetYOrX = mouseMoveClient - this.bar.nativeElement.getBoundingClientRect()[this.axis.topOrLeft];
            /** @type {?} */
            const value = this._scrollMax * (offsetYOrX - mouseDownOffset) / this._trackMax;
            this.ngScrollbar.scrollable.scrollTo({ [this.axis.topOrLeft]: value });
        }))));
    }
    /**
     * Get scrollbar thumb size
     * @param {?} naturalThumbSize
     * @param {?} scrollMax
     * @return {?}
     */
    scrollBoundaries(naturalThumbSize, scrollMax) {
        return (naturalThumbSize < this._minThumbSize) ? this._minThumbSize : scrollMax ? naturalThumbSize : 0;
    }
    /**
     * @param {?} state
     * @return {?}
     */
    updateState(state) {
        this._state.next(Object.assign({}, this._state.value, state));
    }
}
NgScrollbarThumb.decorators = [
    { type: Component, args: [{
                selector: 'ng-scrollbar-thumb',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div #bar class="ng-scrollbar ng-scrollbar-{{orientation}} {{barClass}}" (mousedown)="onScrollbarClick($event)">
      <div #thumb class="ng-scrollbar-thumb {{thumbClass}}" [ngStyle]="scrollbarStyle | async"></div>
    </div>
  `
            }] }
];
/** @nocollapse */
NgScrollbarThumb.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: NgScrollbar, decorators: [{ type: Inject, args: [forwardRef(() => NgScrollbar),] }] }
];
NgScrollbarThumb.propDecorators = {
    barClass: [{ type: Input }],
    thumbClass: [{ type: Input }],
    scrollToDuration: [{ type: Input }],
    orientation: [{ type: Input }],
    bar: [{ type: ViewChild, args: ['bar',] }],
    thumb: [{ type: ViewChild, args: ['thumb',] }]
};
if (false) {
    /**
     * Scrollbar class
     * @type {?}
     */
    NgScrollbarThumb.prototype.barClass;
    /**
     * Scrollbar thumbnail class
     * @type {?}
     */
    NgScrollbarThumb.prototype.thumbClass;
    /**
     * The scroll duration when scrollbar (not the thumbnail) is clicked
     * @type {?}
     */
    NgScrollbarThumb.prototype.scrollToDuration;
    /**
     * Scrollbar orientation
     * @type {?}
     */
    NgScrollbarThumb.prototype.orientation;
    /** @type {?} */
    NgScrollbarThumb.prototype.bar;
    /** @type {?} */
    NgScrollbarThumb.prototype.thumb;
    /** @type {?} */
    NgScrollbarThumb.prototype._minThumbSize;
    /** @type {?} */
    NgScrollbarThumb.prototype._naturalThumbSize;
    /** @type {?} */
    NgScrollbarThumb.prototype._thumbSize;
    /** @type {?} */
    NgScrollbarThumb.prototype._trackMax;
    /** @type {?} */
    NgScrollbarThumb.prototype._scrollMax;
    /** @type {?} */
    NgScrollbarThumb.prototype._currPos;
    /** @type {?} */
    NgScrollbarThumb.prototype._scroll$;
    /** @type {?} */
    NgScrollbarThumb.prototype._thumbDrag$;
    /** @type {?} */
    NgScrollbarThumb.prototype._updateObserver$;
    /** @type {?} */
    NgScrollbarThumb.prototype._view;
    /** @type {?} */
    NgScrollbarThumb.prototype._state;
    /**
     * Scrollbar styles
     * @type {?}
     */
    NgScrollbarThumb.prototype.scrollbarStyle;
    /** @type {?} */
    NgScrollbarThumb.prototype.zone;
    /** @type {?} */
    NgScrollbarThumb.prototype.document;
    /** @type {?} */
    NgScrollbarThumb.prototype.ngScrollbar;
}
export { ɵ0, ɵ1 };

//# sourceMappingURL=data:application/json;base64,